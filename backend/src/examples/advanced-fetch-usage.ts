/**
 * Exemplos de uso do sistema integrado com AdvancedSessionManager
 */

import getAmazonContent, { 
    getAmazonContentAdvanced, 
    getAmazonContentTraditional,
    getRandomHeaderAgent 
} from "../repository/fetch_content.js";

// Exemplo 1: Uso h√≠brido (recomendado) - tenta AdvancedSessionManager primeiro, fallback tradicional
async function exemploUsoHibrido() {
    console.log("=== Exemplo 1: Uso H√≠brido (AdvancedSessionManager + Fallback) ===");
    
    try {
        const resultado = await getAmazonContent("notebook gaming", undefined, true);
        
        if (resultado.includes("--Error")) {
            console.log("‚ùå Falha na busca:", resultado);
        } else {
            console.log("‚úÖ Dados obtidos com sucesso!");
            console.log("üìä Tamanho do HTML:", resultado.length);
            console.log("üîç Cont√©m produtos:", resultado.includes('data-component-type="s-search-result"'));
        }
    } catch (error) {
        console.error("üí• Erro:", error);
    }
}

// Exemplo 2: Uso apenas do AdvancedSessionManager
async function exemploUsoAvancado() {
    console.log("=== Exemplo 2: Apenas AdvancedSessionManager ===");
    
    try {
        const resultado = await getAmazonContentAdvanced("smartphone samsung");
        
        if (resultado.includes("--Error")) {
            console.log("‚ùå AdvancedSessionManager falhou:", resultado);
            
            if (resultado.includes("reCAPTCHA")) {
                console.log("üõ°Ô∏è reCAPTCHA detectado - considere usar proxies ou aguardar");
            }
        } else {
            console.log("‚úÖ AdvancedSessionManager funcionou!");
            console.log("üìä Tamanho do HTML:", resultado.length);
        }
    } catch (error) {
        console.error("üí• Erro:", error);
    }
}

// Exemplo 3: Uso apenas do m√©todo tradicional
async function exemploUsoTradicional() {
    console.log("=== Exemplo 3: Apenas M√©todo Tradicional ===");
    
    try {
        const headerCustomizado = getRandomHeaderAgent();
        const resultado = await getAmazonContentTraditional("mouse gamer", headerCustomizado);
        
        if (resultado.includes("--Error")) {
            console.log("‚ùå M√©todo tradicional falhou:", resultado);
        } else {
            console.log("‚úÖ M√©todo tradicional funcionou!");
            console.log("üìä Tamanho do HTML:", resultado.length);
        }
    } catch (error) {
        console.error("üí• Erro:", error);
    }
}

// Exemplo 4: Compara√ß√£o de performance entre m√©todos
async function exemploComparacaoPerformance() {
    console.log("=== Exemplo 4: Compara√ß√£o de Performance ===");
    
    const keyword = "teclado mec√¢nico";
    
    // Teste m√©todo tradicional
    console.log("üèÉ‚Äç‚ôÇÔ∏è Testando m√©todo tradicional...");
    console.time("M√©todo Tradicional");
    try {
        const resultadoTradicional = await getAmazonContentTraditional(keyword);
        console.timeEnd("M√©todo Tradicional");
        console.log("üìä Tamanho (tradicional):", resultadoTradicional.length);
    } catch (error) {
        console.timeEnd("M√©todo Tradicional");
        console.log("‚ùå M√©todo tradicional falhou");
    }
    
    console.log("\n" + "-".repeat(30) + "\n");
    
    // Teste AdvancedSessionManager
    console.log("üõ°Ô∏è Testando AdvancedSessionManager...");
    console.time("AdvancedSessionManager");
    try {
        const resultadoAvancado = await getAmazonContentAdvanced(keyword);
        console.timeEnd("AdvancedSessionManager");
        console.log("üìä Tamanho (avan√ßado):", resultadoAvancado.length);
    } catch (error) {
        console.timeEnd("AdvancedSessionManager");
        console.log("‚ùå AdvancedSessionManager falhou");
    }
}

// Exemplo 5: Estrat√©gia robusta com m√∫ltiplas tentativas
async function exemploEstrategiaRobusta() {
    console.log("=== Exemplo 5: Estrat√©gia Robusta ===");
    
    const keywords = ["laptop", "fone bluetooth", "monitor 4k"];
    
    for (const keyword of keywords) {
        console.log(`\nüîç Buscando: "${keyword}"`);
        
        // Estrat√©gia: h√≠brido -> avan√ßado -> tradicional
        let resultado: string = "";
        let metodoUsado: string = "";
        
        try {
            // Tentativa 1: H√≠brido
            resultado = await getAmazonContent(keyword, undefined, true);
            metodoUsado = "H√≠brido";
            
            if (resultado.includes("--Error")) {
                // Tentativa 2: Apenas avan√ßado
                console.log("‚ö° Tentando apenas AdvancedSessionManager...");
                resultado = await getAmazonContentAdvanced(keyword);
                metodoUsado = "AdvancedSessionManager";
                
                if (resultado.includes("--Error")) {
                    // Tentativa 3: Apenas tradicional
                    console.log("üîÑ Tentando m√©todo tradicional...");
                    resultado = await getAmazonContentTraditional(keyword);
                    metodoUsado = "Tradicional";
                }
            }
            
            if (resultado.includes("--Error")) {
                console.log(`‚ùå Todas as tentativas falharam para "${keyword}"`);
            } else {
                console.log(`‚úÖ Sucesso com m√©todo ${metodoUsado}!`);
                console.log(`üìä Tamanho: ${resultado.length} caracteres`);
                
                // Verifica se encontrou produtos
                const temProdutos = resultado.includes('data-component-type="s-search-result"');
                console.log(`üõçÔ∏è Produtos encontrados: ${temProdutos ? 'Sim' : 'N√£o'}`);
            }
            
        } catch (error) {
            console.error(`üí• Erro para "${keyword}":`, error instanceof Error ? error.message : error);
        }
        
        // Delay entre buscas para evitar rate limiting
        if (keywords.indexOf(keyword) < keywords.length - 1) {
            console.log("‚è≥ Aguardando antes da pr√≥xima busca...");
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }
}

// Exemplo 6: Monitoramento de bloqueios
async function exemploMonitoramentoBloqueios() {
    console.log("=== Exemplo 6: Monitoramento de Bloqueios ===");
    
    const keyword = "headset gamer";
    let tentativas = 0;
    const maxTentativas = 5;
    
    while (tentativas < maxTentativas) {
        tentativas++;
        console.log(`\nüîÑ Tentativa ${tentativas}/${maxTentativas}`);
        
        try {
            const resultado = await getAmazonContent(keyword);
            
            if (resultado.includes("--Error")) {
                console.log("‚ùå Bloqueado ou erro");
                
                if (resultado.includes("reCAPTCHA")) {
                    console.log("üõ°Ô∏è reCAPTCHA detectado - aguardando mais tempo...");
                    await new Promise(resolve => setTimeout(resolve, 10000)); // 10 segundos
                } else {
                    await new Promise(resolve => setTimeout(resolve, 5000)); // 5 segundos
                }
            } else {
                console.log("‚úÖ Sucesso!");
                console.log(`üìä Dados obtidos: ${resultado.length} caracteres`);
                break;
            }
            
        } catch (error) {
            console.error("üí• Erro na tentativa:", error instanceof Error ? error.message : error);
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
    }
    
    if (tentativas >= maxTentativas) {
        console.log("üö´ M√°ximo de tentativas atingido. Considere:");
        console.log("   - Usar proxy/VPN");
        console.log("   - Aguardar mais tempo");
        console.log("   - Verificar se h√° manuten√ß√£o no site");
    }
}

// Fun√ß√£o principal para executar todos os exemplos
async function executarTodosExemplos() {
    const exemplos = [
        { nome: "Uso H√≠brido", func: exemploUsoHibrido },
        { nome: "Uso Avan√ßado", func: exemploUsoAvancado },
        { nome: "Uso Tradicional", func: exemploUsoTradicional },
        { nome: "Compara√ß√£o Performance", func: exemploComparacaoPerformance },
        { nome: "Estrat√©gia Robusta", func: exemploEstrategiaRobusta },
        { nome: "Monitoramento Bloqueios", func: exemploMonitoramentoBloqueios }
    ];
    
    console.log("üöÄ Executando todos os exemplos do sistema integrado...\n");
    
    for (let i = 0; i < exemplos.length; i++) {
        const exemplo = exemplos[i];
        if (!exemplo) continue;
        
        console.log(`üìç ${i + 1}/${exemplos.length} - ${exemplo.nome}`);
        
        try {
            await exemplo.func();
        } catch (error) {
            console.error(`‚ùå Erro no exemplo "${exemplo.nome}":`, error);
        }
        
        if (i < exemplos.length - 1) {
            console.log("\n" + "=".repeat(60) + "\n");
            // Pausa entre exemplos
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    console.log("\nüèÅ Todos os exemplos foram executados!");
}

// Descomente a linha abaixo para executar todos os exemplos
// executarTodosExemplos().catch(console.error);

export {
    exemploUsoHibrido,
    exemploUsoAvancado,
    exemploUsoTradicional,
    exemploComparacaoPerformance,
    exemploEstrategiaRobusta,
    exemploMonitoramentoBloqueios,
    executarTodosExemplos
};
